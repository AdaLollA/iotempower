#!/usr/bin/env bash
# if not available, install all dependencies
# and also allow to fix shebangs in local bin folder
#
# check if everything from ULNOIOT_EXTERNAL is downloaded and accessable
# if not asks to install it
#
# if called as check_install clean, it will delete content of ULNOIOT_EXTERNAL and
# re-download everything
#
# Author: ulno
# Create date: 2017-05-17
#

[ "$ULNOIOT_ACTIVE" = "yes" ] || { echo "ulnoiot not active, aborting." 1>&2;exit 1; }


function welcome() {
cat << EOF
ulnoiot installer
=================

Welcome to the ulnoiot environment installer. You are just a couple of steps
from setting up a very simple and accessible system to deploy your own
Internet of Things (IoT).

You need build-essential, virtualenv, git, hostapd, dnsmasq, nodejs,
and haveged installed.

On Ubuntu or Debian systems install these with:
sudo apt install build-essential virtualenv git hostapd dnsmasq nodejs

(On raspberry pi, installing nodejs is more difficult. Search the web, how.)

Do you want to set it up? (Y/n)
EOF
}


if [[ "$1" == clean ]]; then
  echo "Deleting external cache."
  echo
  rm -rf "$ULNOIOT_VPYTHON"
  rm -rf "$ULNOIOT_EXTERNAL"
fi

# check if virtualenv is configured
if [[ -e "$ULNOIOT_VPYTHON/bin/activate" ]]; then # check for existing venv
    source "$ULNOIOT_VPYTHON/bin/activate"
else
    welcome
    read answer
    if [[ "$answer" == "y" ||  "$answer" == "Y" || "$answer" == "" ]]; then
        if [[ $(which virtualenv) == "" ]]; then
            echo "You need to install virtualenv. Exiting."
            exit 1
        fi
        if [[ $(which git) == "" ]]; then
            echo "You need to install git. Exiting."
            exit 1
        fi
    else
        echo "Can't continue, exiting now."
        exit 1
    fi
    # TODO: recheck, installation seems to fail first time -> path problems (wrong pip used?)
    # install virtualenv for python2 for platformio
    mkdir -p "$ULNOIOT_VPYTHON2"
    virtualenv -p "$(which python2)" "$ULNOIOT_VPYTHON2"
    source "$ULNOIOT_VPYTHON2/bin/activate"
    pip install --upgrade pip
    pip install --upgrade platformio
    deactivate
    
    # install virtualenv
    mkdir -p "$ULNOIOT_VPYTHON"
    virtualenv -p "$(which python3)" "$ULNOIOT_VPYTHON"
    source "$ULNOIOT_VPYTHON/bin/activate"
    pip install --upgrade pip
    # dependencies
    pip install pyserial
    pip install colorama
    pip install websocket_client
    #pip install restview  # for looking at documentation
    # documentaion viewer
    pip install sphinx
    pip install sphinx_bootstrap_theme
    pip install recommonmark
    # for later development
    pip install paho-mqtt  # also for integriot
    pip install ipython
    pushd . &> /dev/null
    # TODO: fix more dependencies
    # Termux needs: ncurses-utils
    # esptool
    git clone https://github.com/espressif/esptool "$ULNOIOT_EXTERNAL/esptool.git"
    cd "$ULNOIOT_EXTERNAL/esptool.git"
    python setup.py install
    ln -s "$ULNOIOT_EXTERNAL/esptool.git/esptool.py" "$ULNOIOT_VPYTHON/bin/esptool"

    ## mpfshell - upy specific
    #git clone https://github.com/ulno/mpfshell "$ULNOIOT_EXTERNAL/mpfshell.git"
    #cd "$ULNOIOT_EXTERNAL/mpfshell.git"
    #python setup.py install

    # accesspoint
    git clone https://github.com/ulno/create_ap "$ULNOIOT_EXTERNAL/create_ap"
    #cd "$ULNOIOT_EXTERNAL/create_ap"

#    # pyminifier
#    git clone https://github.com/liftoff/pyminifier "$ULNOIOT_EXTERNAL/pyminifier"
#    cd "$ULNOIOT_EXTERNAL/pyminifier"
#    python setup.py install

#    # download firmware
#    mkdir -p "$ULNOIOT_EXTERNAL/firmware"
#    cd "$ULNOIOT_EXTERNAL/firmware"
#    "$ULNOIOT_ROOT/bin/download_firmware"
#    "$ULNOIOT_ROOT/bin/firmware" download

    cd "$ULNOIOT_LOCAL"
    npm install terminal-kit

    popd  &> /dev/null

    bash "$ULNOIOT_ROOT/bin/fix_bin"

    update_cache

fi

exit 0

