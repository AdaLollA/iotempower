#!/bin/bash
# deploy ulnoiot software on wemos d1 mini
#
# $1 can give a tty port as destination parameter (for example: USB0)
# $2 can be a webrepl password

# uncomment for debugging
#DEBUG=yes

password="$2"
test "$password" || password="ulnoiot"

# find directory
dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
"$dir/check_dependencies" || exit 1
EXTERNAL="$dir/../external"
VPYTHON="$EXTERNAL/ulnoiot_vp/"
source "$VPYTHON/bin/activate"

port=$("$dir/find_esp_port" "$1" "$password")

cd "$dir/../lib/boards/wemosd1mini"

hashfile="$(tempfile).hashfile"
echo "Getting file digests."
mpfshell -n -c \
    "open $port; exec from ulnoiot.util import file_hashs; exec file_hashs()" \
    | tail -n+2 > "$hashfile"

if [[ "$DEBUG" = yes ]]; then
    less "$hashfile"
fi

mpfscript="$(tempfile).mpfscript"
echo "Detecting file changes."
echo
python "$dir/create_upload_list.py" "$port" "$hashfile" "$mpfscript"
echo
echo "Executing changes:"


if [[ "$DEBUG" = yes ]]; then
    less "$mpfscript"
fi

logfile="$(tempfile).mpfshell.log"
touch "$logfile" # create so tail doesn't fail

mpfshell --loglevel INFO --logfile "$logfile" -s "$mpfscript" \
    | grep -v "Invalid directory" \
    | sed -u -e 's/mpfs.*>/processing /' - | sed -u -e 's/^/processing /' &
mpfid=$!


tail -f "$logfile" 2>/dev/null &
tailid=$!

wait $mpfid
kill $tailid &>/dev/null
wait $tailid &>/dev/null

# cleanup
rm "$hashfile" "$mpfscript" "$logfile"

echo
echo "Done."

