#!/bin/bash
if [[ "$*" = "help" || "$*" = "-h" || "$*" = "--help" ]]; then
cat << EOF
Syntax: accesspoint

accesspoint creates a local accespoint corresponding to parameters set
in ulnoiot/etc/ulnoiot.conf.
EOF
exit 1
fi

[ "$ULNOIOT_ACTIVE" = "yes" ] || { echo "ulnoiot not active, aborting." 1>&2;exit 1; }

ufw_active=""
sudo ufw status| grep "Status: active" &>/dev/null && ufw_active="true"

while true; do

    # find input network device (device connected to internet)
    INPUT_DEVICE=$(ip route ls|grep default|head -n1|cut -d\  -f5)
    if [ ! "$INPUT_DEVICE" ]; then
      INPUT_DEVICE=lo
    fi

    # detect output wireless network device to start AP on
    OUTPUT_WIFI=""
    if [[ "$ULNOIOT_AP_DEVICES" ]]; then
        available_wifi=$(echo $(ip link show|cut -d: -f2|grep " wl"|cut -b2-))
        for possible in $(echo "$ULNOIOT_AP_DEVICES"); do
            if [[ "$available_wifi" =~ .*"$possible".* ]]; then
                OUTPUT_WIFI="$possible"
                break
            fi
        done
    else
        # Take first available
        OUTPUT_WIFI=$(ip link show|cut -d: -f2|grep " wl"|cut -b2-|tail -n1)
    fi

    # add network extension for making essid more unique
    AP_NAME="$ULNOIOT_AP_NAME_FULL"

    PASSWORD="$ULNOIOT_AP_PASSWORD"

    CHANNEL="$ULNOIOT_AP_CHANNEL"
    if [ "$CHANNEL" = "random" ]; then
        # pick channel randomly
        CHANNEL=$(shuf -n 1 -e 2 3 4 5 7 8 9 10)
    fi

    IP="$ULNOIOT_AP_IP"

    HIDDEN=""
    if [[ "$ULNOIOT_AP_HIDDEN" = "yes" ]]; then
        HIDDEN="--hidden"
    fi

    if [[ "$1" = "show" ]]; then
        echo "ACCESSPOINT_NAME=$AP_NAME"
        exit 0
    fi

    mkdir -p "$ULNOIOT_ROOT/tmp"
    HOSTFILE="$ULNOIOT_ROOT/tmp/ap-host"
    cat << EOF > "$HOSTFILE"
$ULNOIOT_AP_IP $ULNOIOT_AP_HOSTNAME
EOF


    HOSTAPD_EXTRA=""
    if [[ "$ULNOIOT_AP_BRIDGE" ]]; then
        HOSTAPD_EXTRA="--hostapd-extra bridge=br0"
    fi

    echo "Stopping all existing services."
    sudo pkill create_ap
    sleep 2
    echo
    echo "Starting accesspoint with name $AP_NAME on channel $CHANNEL."
    echo "Will use $OUTPUT_WIFI with mac $OUTPUT_MAC to run an accesspoint."
    echo "Internet-input device is $INPUT_DEVICE."
    echo
    sudo iptables -t nat -F POSTROUTING
    sudo iptables -t nat -F PREROUTING
    sudo iptables -F
    sudo iptables -t nat -F
    sudo iptables -t mangle -F
    sudo iptables -X
    if [[ "$ULNOIOT_AP_BRIDGE" ]]; then
        sudo ifconfig br0 down
        sudo brctl delbr br0
        sudo brctl addbr br0
        sudo brctl addif br0 "$ULNOIOT_AP_BRIDGE"
        sudo ifconfig br0 "$IP"
    fi
# sleep needs to be controlled from soemwhere outside this
#    sudo systemd-inhibit \
#        --who "accesspoint" \
#        --why "accesspoint will fail if sleep happens" \
    # udp forwarding seems not to work from 53->5353 seems not to work
    # on void linux
    # enable ip-forwarding
    sudo sysctl -w net.ipv4.ip_forward=1
    sudo "$ULNOIOT_EXTERNAL/create_ap/create_ap" \
        -c "$CHANNEL" $HIDDEN \
        -g "$IP" \
        $HOSTAPD_EXTRA \
        -e "$HOSTFILE" \
        "$OUTPUT_WIFI" "$INPUT_DEVICE" "$AP_NAME" "$PASSWORD" &
    ap_id=$!
    sleep 7 # let ap start up
    if [[ "$ULNOIOT_AP_BRIDGE" ]]; then
        # fix ip address
        sudo ifconfig "$OUTPUT_WIFI" 0.0.0.0
        sudo ifconfig br0 "$IP"
        sudo iptables -t nat -D POSTROUTING 1
        sudo iptables -t nat -A POSTROUTING -s $ULNOIOT_AP_IP/24 \
                -o "$INPUT_DEVICE" -j MASQUERADE
    fi
    # make sure to restore firewall
    if [[ "$ufw_active" ]]; then
        sudo ufw enable
    fi
    wait $ap_id
done
