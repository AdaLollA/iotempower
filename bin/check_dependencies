#!/bin/bash
# check dependencies
# author: ulno creation date
#
# check if everything from ULNOIOT_EXTERNAL is downloaded and accessable
# if not asks to install it
#
# if called as check_install clean, it will delete content of ULNOIOT_EXTERNAL and
# redownload everything

# find directory and read config
dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
if [ ! "$ULNOIOT_ROOT" ]; then # break potential recursion
    ULNOIOT_ROOT="$dir/.."
    source "$ULNOIOT_ROOT/bin/read_config"
fi

if [[ "$1" == clean ]]; then
  echo "Deleting external cache."
  rm -rf "$ULNOIOT_EXTERNAL"
fi

# check if virtualenv is configured
if [[ -e "$ULNOIOT_VPYTHON/bin/activate" ]]; then # check for existing venv
    source "$ULNOIOT_VPYTHON/bin/activate"
else
    echo "No external environment found in $ULNOIOT_EXTERNAL."
    echo -n "Do you want to try to set it up? (Y/n) "
    read answer
    if [[ ${answer,,} == "y" || ${answer,,} == "" ]]; then
        if [[ $(which virtualenv) == "" ]]; then
            echo "You need to install virtualenv. Exiting."
            exit 1
        fi
        if [[ $(which git) == "" ]]; then
            echo "You need to install git. Exiting."
            exit 1
        fi
    else
        echo "Can't continue, exiting now."
        exit 1
    fi
    # install virtualenv
    mkdir -p "$ULNOIOT_VPYTHON"
    virtualenv -p "$(which python3)" "$ULNOIOT_VPYTHON"
    source "$ULNOIOT_VPYTHON/bin/activate"
    pip install --upgrade pip
    # dependencies
    pip install pyserial
    pip install colorama
    pip install websocket_client
    pushd . &> /dev/null
    # esptool
    git clone https://github.com/espressif/esptool "$ULNOIOT_EXTERNAL/esptool.git"
    cd "$ULNOIOT_EXTERNAL/esptool.git"
    python setup.py install
    ln -s "$ULNOIOT_EXTERNAL/esptool.git/esptool.py" "$ULNOIOT_VPYTHON/bin/esptool"
    # mpfshell
    git clone https://github.com/ulno/mpfshell "$ULNOIOT_EXTERNAL/mpfshell.git"
    cd "$ULNOIOT_EXTERNAL/mpfshell.git"
    python setup.py install
    # accesspoint
    git clone https://github.com/oblique/create_ap "$ULNOIOT_EXTERNAL/create_ap"
    #cd "$ULNOIOT_EXTERNAL/create_ap"
    # download firmware
    mkdir -p "$ULNOIOT_EXTERNAL/firmware"
    cd "$ULNOIOT_EXTERNAL/firmware"
    "$dir/download_allfirmware_here"
    popd  &> /dev/null
fi

exit 0

