#!/bin/bash
if [[ $# -gt 2 || "$*" = "help" || "$*" = "-h" || "$*" = "--help" ]]; then
cat << EOF
Syntax: deploy [node-address [password]]

deploy must be called from a node directory (or one of its parent system
directories) and reads its configuration from there.

It rebuilds firmwares for the affected nodes and remotely flashes
the respected nodes.

If a node-address is given (for example as an IP), deploy will falsh the 
node with that respective address. If also a password is given, then this
password is used instead of the specific node password. This can be
important to re-initialize a node configured for a diffrent system.

If deploy is called from a node's parent folder, it updates all nodes in
subdirectories of this parent folder.

EOF
exit 1
fi
# (updates and) deploys a node
# can be called from a node folder or from parent folder of node-folders
#
# if noupdate as parameter is given only the user-part is deployed
# (deploy is skipped)
# configuration files are not updated (TODO: consider making this possible)


[ "$ULNOIOT_ACTIVE" = "yes" ] || { echo "ulnoiot not active, aborting." 1>&2;exit 1; }


if [[ -e "node.conf" ]]; then  # started from node-directory
    source "$ULNOIOT_ROOT/bin/read_node_config"
    export board # for platformio.ini

    # noupdate=""
    # if [[ "$@" == *noupdate* ]]; then
    #     noupdate=1
    # fi

    if [[ "$1" ]]; then
        address="$1"
    else
#        echo "Getting IP of node $topic for deployment."
#        address=$(get_ip "$topic" 2>/dev/null|grep "$topic"|cut -d\  -f2)
        address="$node_name.local"
    fi

    if [[ "$2" ]]; then
        password="$2"
    else
        password=$(tail -n1 key.txt|head -c 64)
    fi

    if [ "$address" ]; then
        echo "Deploying user files to node $topic with address $address."
        path="$(pwd)"

        prepare_build_dir
        cd build
        export PLATFORMIO_UPLOAD_PORT="$address"
        export PLATFORMIO_UPLOAD_FLAGS="--progress
--port=8266
--auth="\""$password"\"

        platformio run -t upload || { echo "Trouble compiling or uploading new firmware, check errors."; exit 1; }
        echo "Uploading done."

    else
        echo "Could not find address of node with topic $topic for deployment. Skipping."
        exit 1
    fi

else # started from somewhere else, so search for node.conf in subdirs

    path="$(pwd)"
    echo "This is not a node, so search sub-folders for node.conf files and"
    echo "deploy all of them."
    echo
    # TODO: think about runnning them all in parallel (or batches)
    find -name node.conf |\
        while read n; do
            cd "$path"
            cd $(dirname "$n")
            deploy "$@" # call recursive for node-dir
        done

fi # not in node-dir