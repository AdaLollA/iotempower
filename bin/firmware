#!/usr/bin/env bash
# download, if necessary micropython firmware and build everything
#
# if called as build_firmware clean, it will delete content of ULNOIOT_EXTERNAL/firmware
#
# Author: ulno
# Create date: 2017-05-17
#

if [[ $# = 0 || "$*" = "help" || "$*" = "-h" || "$*" = "--help" ]]; then
cat << EOF
Syntax: firmware command

firmware can be used to download and build the micropython firmware. It also
can make the  micropython bytcode compiler available.

Commands supported so far:
- download: just download everything
- mpy: install mpy-bytecode compiler
- build: build firmware
- clean: delete everything firmware-related

EOF
exit 1
fi

# TODO: test for build-essential gperf bison flex texinfo help2man libtool-bin \
#    unrar-free autoconf automake libtool gcc g++ \
#    flex bison texinfo gawk ncurses-dev libexpat-dev python-dev python python-serial \
#    sed git unzip bash help2man wget bzip2 gperf help2man

[ "$ULNOIOT_ACTIVE" = "yes" ] || { echo "ulnoiot not active, aborting." 1>&2;exit 1; }

mkdir -p "$ULNOIOT_FIRMWARE"

if [[ "$1" == clean ]]; then
  echo "Deleting external cache."
  echo
  rm -rf "$ULNOIOT_FIRMWARE"
  exit 0
fi


# check if firmware tools are downloaded
if [[ -e "$ULNOIOT_FIRMWARE/micropython/README.md" ]]; then # check for existing venv
    echo "Firmware tools found."
else
    if [[ $(which git) == "" ]]; then
        echo "You need to install git. Exiting."
        exit 1
    fi
    cd "$ULNOIOT_FIRMWARE"
    echo
    echo "Downloading esp-open-sdk."
    # seems that just files are missing (fixed below)
    ## make sure older version of crosstool-NG is downloaded? (pre-June)
    ## new one is broken -> only files missing
    # TODO: nonos-zips not available
    git clone --recursive https://github.com/pfalcon/esp-open-sdk
    echo
#    echo "Downloading micropython."
#    git clone https://github.com/micropython/micropython
    # to allow deallocating serial, we now use upy from here:
    # https://github.com/micropython/micropython/pull/3277#pullrequestreview-57380140
    echo "Downloading micropython from dmkent."
    git clone https://github.com/dmkent/micropython
    git checkout uart-sep
    echo
    echo "Downloading micropython-lib."
    git clone https://github.com/micropython/micropython-lib
    echo
    echo "Downloading python-lcd support."
    git clone https://github.com/dhylands/python_lcd.git
    # ota will be downloaded in general, not necessary here
#    echo
#    echo "Downloading ota-firmware tools"
#    git clone --recursive https://github.com/ulno/yaota8266

    ## link axtls <- NO, this leads to exceptions, --recursive is the trick!
    #rmdir "$ULNOIOT_FIRMWARE/yaota8266/ota-server/lib/axtls"
    #ln -s "$ULNOIOT_FIRMWARE/micropython/lib/axtls" \
    #    "$ULNOIOT_FIRMWARE/yaota8266/ota-server/lib/axtls"
fi

if [[ "$1" == download ]]; then
    echo "Download is done, finishing."
    exit 0
fi

if [[ "$1" == mpy ]]; then
    cd "$ULNOIOT_FIRMWARE/micropython/mpy-cross"
    make
    echo "Built mpy, finishing."
    exit 0
else # build everything.

echo
echo "Trying to build everything to create the ulnoiot micropython firmware for you."
# the next things dosn't work with python3, so let's trick them to use python2
cd "$ULNOIOT_FIRMWARE"
mkdir -p bin
cat << EOF > bin/python
#!$(which bash)
exec python2 "\$@"
EOF
chmod a+x bin/python
alias python=python2


echo
echo "First, building open-sdk. This might take really long."
cd "$ULNOIOT_FIRMWARE/esp-open-sdk"
make # this will fail but might download some important stuff?
# recreate missing files
echo
echo "[ulnoiot] Patching open-sdk (copying missing files)"
for f in conf kconfig.mk mconf nconf; do
    cp "crosstool-NG/kconfig/$f" crosstool-NG/lib/crosstool-ng-*/kconfig
done
make || { echo "Trouble making esp-open-sdk, aborting.";exit 1; }

echo
echo "Second, link code to freeze."
#ports="ports/" # for newer micropython versions
ports="" # for upy versions until 1.9.2
cd "$ULNOIOT_FIRMWARE/micropython/${ports}esp8266/modules"
# remove old stuff
mkdir -p ../modules.bak
mv upip* ../modules.bak &> /dev/null
mv ntptime* ../modules.bak  &> /dev/null
rm -rf ulnoiot uiot umqtt ssd1306.py
# TODO: remove more webrepl stuff
# relink new stuff
ln -s "$ULNOIOT_FIRMWARE/micropython-lib/umqtt.simple/umqtt" .
ln -s "$ULNOIOT_FIRMWARE/micropython/drivers/display/ssd1306.py" . # TODO: consider adding this to compile
ln -s "$ULNOIOT_ROOT/lib/node_types/esp8266/freeze/uiot" .
ln -s "$ULNOIOT_FIRMWARE/python_lcd/lcd/esp8266_i2c_lcd.py" .
ln -s "$ULNOIOT_FIRMWARE/python_lcd/lcd/lcd_api.py" .


# netrepl stuff
ln -s $ULNOIOT_ROOT/lib/netrepl/chacha.py .
ln -s $ULNOIOT_ROOT/lib/netrepl/unetrepl.py .
ln -s $ULNOIOT_ROOT/lib/netrepl/crypt_socket.py .
ln -s $ULNOIOT_ROOT/lib/netrepl/hashlist.py .
# as we now use netrepl, remove webrepl
rm webrepl.py
rm webrepl_setup.py
rm websocket_helper.py


echo
echo "Third, build firmware for non-ota."
cd ../..
git submodule update --init
cd esp8266
# make doesn't work anymore after having made ota once, there seems to be
# too much fi./.AndroidStudio3.0/config/plugins/python/helpers/pycharm_generator_utils/pyparsing.pyrmware around, so delete it first
rm build/firmware.elf-0x*.bin
make axtls && make || { echo "Something went wrong compiling no-ota fw, check errors.";exit 1; }
echo "Done building firmware successfully."
echo "Copying no-ota firmware to flash position."
cp "$ULNOIOT_FIRMWARE/micropython/${ports}esp8266/build/firmware-combined.bin" \
    "$ULNOIOT_FIRMWARE/firmware.bin"

echo
echo "Fourth, build ota firmware."
make ota || { echo "Something went wrong compiling ota-fw, check errors.";exit 1; }


#### YAOTA8266 OTA for micropython
cd "$ULNOIOT_FIRMWARE/yaota8266"
# check if keys have been created
echo Preparing bootloader
keydir="$ULNOIOT_ROOT/etc/yaota8266-keys"
mkdir -p "$keydir"
chmod 700 "$keydir"
ln -s "$keydir/priv.key" ota-client &> /dev/null
ln -s "$keydir/pub.key" ota-client &> /dev/null
ln -s "$conffile" . &> /dev/null
if [[ ! -e "$conffile" ]]; then # check for config.h-file
    if [[ ! -e "$keydir/priv.key" ]]; then
        echo "Creating your own keys in $keydir."
        pushd . &> /dev/null
        cd "$keydir"
        bash "$ULNOIOT_FIRMWARE/yaota8266/ota-client/gen_keys.sh"
        popd &> /dev/null
    fi
    modulus=$(openssl rsa -modulus -noout -in "$keydir/priv.key"|cut -d= -f2)
    # prepare for insertion into config.h
    cmodulus=$(
        for n in $( seq 0 2 $(( ${#modulus} - 1 )) ); do
            echo -n "\\\\x${modulus:$n:2}"
        done
    )
    sed "s/^.*#define MODULUS .*$/#define MODULUS "\""$cmodulus"\""/" config.h.example > config.h
    #cat config.h.example > config.h
fi

echo Compiling ota-bootloader
make clean # need to clean to cover changes in config
make || { echo "Something went wrong compiling yaota, check errors.";exit 1; }

echo "Merging bootloader and OTA-firmware to flash position."
cat "$ULNOIOT_FIRMWARE/yaota8266/yaota8266.bin" \
    "$ULNOIOT_FIRMWARE/micropython/${ports}esp8266/build/firmware-ota.bin" \
    > "$ULNOIOT_FIRMWARE/firmware-initial.bin"

# sign firmware
echo "Signing firmware."
cd "ota-client"
python3 ota_client.py sign "$ULNOIOT_FIRMWARE/micropython/${ports}esp8266/build/firmware-ota.bin"
cp "$ULNOIOT_FIRMWARE/micropython/${ports}esp8266/build/firmware-ota.bin.ota" \
    "$ULNOIOT_FIRMWARE/firmware.ota"

# cleanup
unalias python
rm "$ULNOIOT_FIRMWARE/bin/python"

fi # build everything

exit 0
