#!/bin/bash
# update (or initially install) ulnoiot software on a flashed esp8266
# via serial port


# uncomment for debugging
#DEBUG=yes

[ "$ULNOIOT_ACTIVE" = "yes" ] || { echo "ulnoiot not active, aborting." 1>&2;exit 1; }

if [[ $# -le 1 || "$*" = "help" || "$*" = "-h" || "$*" = "--help" ]]; then
cat << EOF
Syntax: update_serial_esp8266 serial_port node_type [alsodeploy]
EOF
exit 1
fi

port="$1"

path="$(pwd)"
echo "Creating node dir."
node_dir=$(create_node_dir "$2"|tail -n1)
# TODO: check why this isn't executed for sonoff
if [[ "$3" = alsodeploy ]]; then
    if [[ "$DEBUG" = yes ]]; then
        echo DEBUG: autodeploy selected
    fi
    rsync -r copy/ "$node_dir/"
    # TODO: also check an existing compile directory and compile and copy
fi
echo "Created at $node_dir."
cd "$node_dir"

hashfile="$(mktemp --suffix .hashfile)"
echo "Getting file digests."
mpfshell -n -c \
    "open $port; exec import hashlist; exec hashlist.hashlist()" \
    | tail -n+2 > "$hashfile"

if [[ "$DEBUG" = yes ]]; then
    less "$hashfile"
fi

mpfscript="$(mktemp --suffix .mpfscript)"
echo "Detecting file changes."
echo
python "$ULNOIOT_ROOT/bin/update_create_upload_list.py" \
    "$port" "$hashfile" "$mpfscript"
echo
echo "Executing changes:"


if [[ "$DEBUG" = yes ]]; then
    less "$mpfscript"
fi

logfile="$(mktemp --suffix .mpfshell.log)"
touch "$logfile" # create so tail doesn't fail

mpfshell --loglevel INFO --logfile "$logfile" -s "$mpfscript" \
    | grep -v "Invalid directory" \
    | sed -u -e 's/mpfs.*>/processing /' - | sed -u -e 's/^/processing /' &
mpfid=$!


tail -f "$logfile" 2>/dev/null &
tailid=$!

wait $mpfid
kill $tailid &>/dev/null
wait $tailid &>/dev/null

# cleanup
cd "$path"
rm "$hashfile" "$mpfscript" "$logfile"
rm -rf "$node_dir"

echo
echo "Done updating via serial."

