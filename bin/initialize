#!/bin/bash
if [[ $# -gt 2 || "$*" = "help" || "$*" = "-h" || "$*" = "--help" ]]; then
cat << EOF
Syntax: initialize [[serial_port] noflash]

initialize must be called from a node directory and reads its configuration
from there.
It looks for a locally (i.e. via serial) connected board matching the node
description.

It flashes the board with ulnoiot's version of micropython (if noflash is given,
this step is skipped).
It then sets or overwrites wifi and encryption data, respective to the current
node configuration folder.
Then, it calls a local/serial update on it and installs initial system
user-space software.
Then it calls a network deploy to copy the user folder and autostart to it.
The last two steps fail, if the node router and mqtt broker are not available.
Running deploy noupdate again (when router and mqtt broker become avaialable)
fixes/finishes this.

serial_port: can be usb0, usb1, or acm0, acm1, ...
EOF
exit 1
fi


[ "$ULNOIOT_ACTIVE" = "yes" ] || { echo "ulnoiot not active, aborting." 1>&2;exit 1; }

source "$ULNOIOT_ROOT/bin/read_config"

port=$(find_esp_port "$1")

# if this is set, skip flashing
if [[ "$*" != *noflash ]]; then

## TODO: support other boards
echo "Flashing Wemos D1 Mini."
flash_serial_esp8266 "$1"
echo "Waiting 7s until things are settled (formatting internal flash)."
sleep 7 # let things rest
echo "Installing software."
update_serial_wemosd1mini "$1"
echo
echo "7s wait for reset to finish."
sleep 7

fi # noflash

# check key-file and eventually regenerate
KEYFILE=key.hex
key=$(tail -n1 "$KEYFILE")
if [[ ! ${#key} = 64 ]]; then
    # TODO: check that haveged is running and maybe check not to overwrite key?
    head -c32 /dev/random|od -A n -t x2|tr -d ' \r\n' > "$KEYFILE"
    key=$(tail -n1 "$KEYFILE")
fi

echo
echo "Creating wifi config."
wifi_cfg="$(mktemp --suffix .ulnoiot)"
cat > "$wifi_cfg" << EOF
name="$ULNOIOT_AP_NAME"
password="$ULNOIOT_AP_PASSWORD"
EOF

echo "Creating netrepl config."
netrepl_cfg="$(mktemp --suffix .ulnoiot)"
cat > "$netrepl_cfg" << EOF
key="$key"
EOF

echo "Creating gw config."
gw_cfg="$(mktemp --suffix .ulnoiot)"
if [ "$ULNOIOT_MQTT_USER" ]; then # authentication is set
    cat > "$gw_cfg" << EOF
from ulnoiot import *
mqtt("$ULNOIOT_AP_HOSTNAME","$topic","$ULNOIOT_MQTT_USER","$ULNOIOT_MQTT_PW")
EOF
else
    cat > "$gw_cfg" << EOF
from ulnoiot import *
mqtt("$ULNOIOT_AP_HOSTNAME","$topic")
EOF
fi

echo "Sending key, config, and resetting."
mpfshell -n -c \
"open $port; "\
"put $wifi_cfg /wifi_cfg.py; "\
"put $netrepl_cfg /netrepl_cfg.py;"\
"put $gw_cfg /gw_cfg.py;"\
"exec import machine; exec machine.reset()"

# tidy up
rm "$wifi_cfg" "$gw_cfg" "$netrepl_cfg"

echo "Waiting 10s until reset is done and internet connected."
sleep 10
echo "Copying files via network."
deploy noupdate

echo
echo "Done."

