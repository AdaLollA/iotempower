#!/bin/bash
if [[ $# -gt 2 || "$*" = "help" || "$*" = "-h" || "$*" = "--help" ]]; then
cat << EOF
Syntax: initialize [serial_port] [noflash] [noupdate]

initialize must be called from a node directory and reads its configuration
from there.
It looks for a locally (i.e. via serial) connected board matching the node
description.

It flashes the board with ulnoiot's version of micropython (if noflash is given,
this step is skipped).
It then sets or overwrites wifi and encryption data, respective to the current
node configuration folder.
Then, it calls a local/serial update on it and installs initial system
user-space software.
Then it calls a network deploy to copy the user folder and autostart to it.
The last two steps fail, if the node router and mqtt broker are not available.
Running deploy noupdate again (when router and mqtt broker become avaialable)
fixes/finishes this.

serial_port: can be empty, usb0, usb1, or acm0, acm1, ...
EOF
exit 1
fi


[ "$ULNOIOT_ACTIVE" = "yes" ] || { echo "ulnoiot not active, aborting." 1>&2;exit 1; }

source "$ULNOIOT_ROOT/bin/read_node_config"

port=$(find_esp_port "$1")

platform_folder="$ULNOIOT_ROOT/lib/node_types/$board"

# if this is set, skip flashing
if [[ "$*" != *noflash* ]]; then
    flash_serial "$port"
fi

# potentially skip the update
if [[ "$*" != *noupdate* ]]; then
    update_serial "$port" alsodeploy
fi

# check key-file and eventually regenerate
KEYFILE=key.hex
key=$(tail -n1 "$KEYFILE")
if [[ ! ${#key} = 64 ]]; then
    # TODO: check that haveged is running and maybe check not to overwrite key?
    echo "Generating new key."
    head -c32 /dev/random|od -A n -t x2|tr -d ' \r\n' > "$KEYFILE"
    key=$(tail -n1 "$KEYFILE")
fi

echo
echo "Creating wifi/netrepl/mqtt config."
cfg="$(mktemp --suffix .ulnoiot)"
cat > "$cfg" << EOF
wifi_name = "$ULNOIOT_AP_NAME"
wifi_pw = "$ULNOIOT_AP_PASSWORD"
netrepl="$key"
mqtt_host = "$ULNOIOT_AP_HOSTNAME"
mqtt_topic = "$topic"
mqtt_user = "$ULNOIOT_MQTT_USER"
mqtt_pw = "$ULNOIOT_MQTT_PW"
EOF


echo "Sending config and resetting."
mpfshell -n -c \
"open $port; "\
"put $cfg /config.py; "\
"exec import machine; exec machine.reset()"

# tidy up
rm "$cfg"

# we deployed already in serial update
#echo "Waiting 15s until reset is done and internet connected."
#sleep 15
#echo "Copying files via network."
#deploy noupdate

echo
echo "Done initializing."

