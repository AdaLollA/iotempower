#!/bin/bash
# update (or initially install) ulnoiot software on wemos d1 mini
#
# $1 can give a tty port as destination parameter (for example: USB0)
# $2 can be a webrepl password <- obsolete

# uncomment for debugging
#DEBUG=yes

password="$2"
test "$password" || password="ulnoiot"

[ "$ULNOIOT_ACTIVE" = "yes" ] || { echo "ulnoiot not active, aborting." 1>&2;exit 1; }


port=$(find_esp_port "$1" "$password")

node_dir="$ULNOIOT_ROOT/tmp/tmp-wemos-node"
rm -rf "$node_dir" &> /dev/null # make sure it's empty
create_node_dir wemos_d1_mini "$node_dir"
cd "$node_dir"

hashfile="$(mktemp --suffix .hashfile)"
echo "Getting file digests."
mpfshell -n -c \
    "open $port; exec import hashlist; exec hashlist.hashlist()" \
    | tail -n+2 > "$hashfile"

if [[ "$DEBUG" = yes ]]; then
    less "$hashfile"
fi

mpfscript="$(mktemp --suffix .mpfscript)"
echo "Detecting file changes."
echo
python "$ULNOIOT_ROOT/bin/update_create_upload_list.py" \
    "$port" "$hashfile" "$mpfscript"
echo
echo "Executing changes:"


if [[ "$DEBUG" = yes ]]; then
    less "$mpfscript"
fi

logfile="$(mktemp --suffix .mpfshell.log)"
touch "$logfile" # create so tail doesn't fail

mpfshell --loglevel INFO --logfile "$logfile" -s "$mpfscript" \
    | grep -v "Invalid directory" \
    | sed -u -e 's/mpfs.*>/processing /' - | sed -u -e 's/^/processing /' &
mpfid=$!


tail -f "$logfile" 2>/dev/null &
tailid=$!

wait $mpfid
kill $tailid &>/dev/null
wait $tailid &>/dev/null

# cleanup
rm "$hashfile" "$mpfscript" "$logfile"

echo
echo "Done."

