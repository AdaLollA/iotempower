#!/usr/bin/env bash
# This file might be not executable as is (for example when run in Termux on
# Android). This file is best run as: bash run
# (after changing into this ulnoiot directory)
#
# At first start it installs the local ulnoiot-environment
#
# Author: ulno
# Create date: 2017-05-17
#
# if parameters are given and the first is "exec", ulnoiot will execute
# the rest of the parameters as command in ulnoiot environment

HELP_PATH=lib/boards/wemosd1mini/ulnoiot/help
# TODO: adjust path to different selected micro controllers depending on node

function welcome() {
cat << EOF
ulnoiot
=======

Your friendly and affordable Internet of Things environment.
More at http://github.com/ulno/ulnoiot

EOF
}

function usage() {
welcome
cat << EOF
Syntax: ulnoiot [command command_parameters]

The following commands are possible:

- exec [cmd+arguments]:
  Execute cmd inside the ulnoiot environment. Check out all the helper scripts
  in ulnoiot/bin

- upgrade:
  Update current version ulnoiot with newest version from git repository.

- welcome:
  Print the welcome message (again).

- help [cmd]:
  Display help on a specific command given in cmd. If cmd is empty,
  show this help.

If no command is given, execute the bash shell in the ulnoiot environment.
The first time this is run, external dependencies are downloaded and
installed here too.

cmd in help [cmd] can be any of the following:
EOF
comma=""
ls "$ULNOIOT_ROOT/$HELP_PATH/"*.txt | while read f; do
    f=$(basename "$f")
    if [[ ${f:0:1} != "_" ]]; then
        echo -n $comma${f:0:-4}
    fi
    comma=", "
done
echo
echo

}

function check_files() {
    for file in "$@"; do
        if [ ! -e "$file" ]; then
            echo "Can't find $file."
            return 1
        fi
    done
    return 0
}


function check_root() {
    if [ -e "$ULNOIOT_ROOT/lib/shell_starter/ulnoiot.bash" ]; then
        cd "$ULNOIOT_ROOT"
    fi
    # else we should assume that we were started from the root-directory
    #echo -n "Checking now that we are in the ulnoiot root directory. "
    check_files "lib/shell_starter/ulnoiot.bash" \
        "bin/shebang_run" \
        "etc/ulnoiot.conf.example"
    if [ $? -ne 0 ]; then
        echo
        echo "Cannot find ulnoiot files."
        echo "Stopping now."
        return 1
    fi

    # Yes, found them.
    echo
    return 0
}

function check_install() {
    # Check if all local directories and paths have been set up
    check_files .local/bin/shebang_run .local/vp/bin/activate
    return $?
}

function install() {
    echo "Installing now."
    echo
    bash "$ULNOIOT_ROOT/bin/install"
}

function help() {
    local m
    local p
    local l
    p="$ULNOIOT_ROOT/$HELP_PATH/$1.txt"
    { cat "$p"; echo; } | while read l; do
        if [[ "$l" = "!!"* ]]; then
            if [[ "$l" =~ '!!help("'(.*)'")' ]]; then
                m="${BASH_REMATCH[1]}"
                help "$m"
            else
                echo "[[Cannot parse (call help on micro controller prompt:"
                echo "  ${l:2}]]"
            fi
        else
            echo "$l"
        fi
    done
}

function run() {
    case "$1" in
        welcome)
            welcome
            ;;
        help | -h | --help)
            shift
            if [[ "$1" ]]; then
                help "$1"
            else
                usage
            fi
            ;;
        upgrade)
            cd "$ULNOIOT_ROOT"
            echo "Upgrading ulnoiot."
            echo "Getting changes from git."
            git pull
            echo "Fixing binary links."
            fix_bin
            ;;
        exec | -x | -c | --exec)
            shift
            exec "$@"
            ;;
        *)
            welcome
            exec bash
    esac
}


######## Main #########
current_path="$(pwd)" # save to restore later
if check_root; then
    export ULNOIOT_ROOT=$(realpath "$(pwd)")
    source "$ULNOIOT_ROOT/lib/shell_starter/ulnoiot.bash" \
        || { echo "Can't read configuration. Aborting."; exit 1; }
    check_install
    cd "$current_path" # back to where we have been called
    if [ $? -eq 0 ]; then
        run "$@"
    else
        if install; then # if it failed, try to install first
            run "$@"
        fi
    fi
fi
